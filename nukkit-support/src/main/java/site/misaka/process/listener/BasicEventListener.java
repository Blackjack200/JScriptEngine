package site.misaka.process.listener;

import cn.nukkit.event.EventHandler;
import cn.nukkit.event.EventPriority;
import cn.nukkit.event.Listener;
import cn.nukkit.event.block.*;
import cn.nukkit.event.entity.*;
import cn.nukkit.event.inventory.*;
import cn.nukkit.event.level.*;
import cn.nukkit.event.player.*;
import cn.nukkit.event.plugin.PluginDisableEvent;
import cn.nukkit.event.plugin.PluginEnableEvent;
import cn.nukkit.event.potion.PotionApplyEvent;
import cn.nukkit.event.potion.PotionCollideEvent;
import cn.nukkit.event.redstone.RedstoneUpdateEvent;
import cn.nukkit.event.server.*;
import cn.nukkit.event.vehicle.*;
import cn.nukkit.event.weather.LightningStrikeEvent;
import site.misaka.process.ScriptEngineFacade;

//WARNING
//WARNING
//WARNING
//DO NOT EDIT THIS FILE
//THIS FILE IS AUTO-GENERATED
@SuppressWarnings("unused")
public class BasicEventListener implements Listener {

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerRespawn(PlayerRespawnEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onInteractEntity(PlayerInteractEntityEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onTeleport(PlayerTeleportEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}


	public void onSwim(PlayerToggleSwimEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onGlide(PlayerToggleGlideEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onSneak(PlayerToggleSneakEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onSprint(PlayerToggleSprintEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onFlight(PlayerToggleFlightEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEnterBed(PlayerBedEnterEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onLeaveBed(PlayerBedLeaveEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onChat(PlayerChatEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onLogin(PlayerPreLoginEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onQuit(PlayerQuitEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onJoin(PlayerJoinEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onBreak(BlockBreakEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlace(BlockPlaceEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onFormResponse(PlayerFormRespondedEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onBlockPistonChangeEvent(BlockPistonChangeEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onBlockUpdateEvent(BlockUpdateEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onBlockSpreadEvent(BlockSpreadEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onDoorToggleEvent(DoorToggleEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onBlockRedstoneEvent(BlockRedstoneEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onCommand(PlayerCommandPreprocessEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onInventory(InventoryTransactionEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerItemHeld(PlayerItemHeldEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onInteract(PlayerInteractEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onServerCommand(ServerCommandEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onMove(PlayerMoveEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntity(EntitySpawnEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityDespawn(EntityDespawnEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityDamage(EntityDamageEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityDamageByEntityEvent(EntityDamageByEntityEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onDeath(PlayerDeathEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityDeath(EntityDeathEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityTeleport(EntityTeleportEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onItemDespawnEvent(ItemDespawnEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onItemSpawnEvent(ItemSpawnEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onProjecttileHit(ProjectileHitEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onProjectileLaunch(ProjectileLaunchEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityLevelChangeEvent(EntityLevelChangeEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityInventoryChange(EntityInventoryChangeEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onExplosionPrime(EntityExplosionPrimeEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onBlockBurn(BlockBurnEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onBlockFormEvent(BlockFormEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onBlockIgniteEvent(BlockIgniteEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onBlockFade(BlockFadeEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onBlockFall(BlockFallEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onBlockGrow(BlockGrowEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onSignChangeEvent(SignChangeEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onItemFrameDrop(ItemFrameDropItemEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onLeavesDecay(LeavesDecayEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onRedstoneUpdateEvent(RedstoneUpdateEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onCraft(CraftItemEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onInventoryOpen(InventoryOpenEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onInventoryClock(InventoryCloseEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onFurnaceBurn(FurnaceBurnEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onFurnaceSmelt(FurnaceSmeltEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onInventoryPickupArrow(InventoryPickupArrowEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onIntentoryPickupItem(InventoryPickupItemEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPotionCollideEvent(PotionCollideEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onDataPacketReceive(DataPacketReceiveEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onDataPacketSend(DataPacketSendEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onQueryRegenerate(QueryRegenerateEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onBlockForm(BlockFormEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onBlockFormTo(BlockFromToEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onLiquid(LiquidFlowEvent event) {
		ScriptEngineFacade.invokeEvent(event);

	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onInventoryClick(InventoryClickEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onChunkUnload(ChunkUnloadEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerSetting(PlayerSettingsRespondedEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onCreatureSpawnEvent(CreatureSpawnEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onCreeperPowerEvent(CreeperPowerEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityArmorChangeEvent(EntityArmorChangeEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityBlockChangeEvent(EntityBlockChangeEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityCombustByBlockEvent(EntityCombustByBlockEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityCombustByEntityEvent(EntityCombustByEntityEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityCombustEvent(EntityCombustEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityDamageByBlockEvent(EntityDamageByBlockEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityDamageByChildEntityEvent(EntityDamageByChildEntityEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityExplodeEvent(EntityExplodeEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityMotionEvent(EntityMotionEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityPortalEnterEvent(EntityPortalEnterEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityRegainHealthEvent(EntityRegainHealthEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityShootBowEvent(EntityShootBowEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityVehicleEnterEvent(EntityVehicleEnterEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityVehicleExitEvent(EntityVehicleExitEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onExplosionPrimeEvent(ExplosionPrimeEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onBrewEvent(BrewEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEnchantItemEvent(EnchantItemEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onInventoryMoveItemEvent(InventoryMoveItemEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onStartBrewEvent(StartBrewEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onChunkLoadEvent(ChunkLoadEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onChunkPopulateEvent(ChunkPopulateEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onLevelInitEvent(LevelInitEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onLevelLoadEvent(LevelLoadEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onLevelSaveEvent(LevelSaveEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onLevelUnloadEvent(LevelUnloadEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onSpawnChangeEvent(SpawnChangeEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onThunderChangeEvent(ThunderChangeEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onWeatherChangeEvent(WeatherChangeEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerAchievementAwardedEvent(PlayerAchievementAwardedEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerAnimationEvent(PlayerAnimationEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerAsyncPreLoginEvent(PlayerAsyncPreLoginEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerBlockPickEvent(PlayerBlockPickEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerBucketEmptyEvent(PlayerBucketEmptyEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerBucketFillEvent(PlayerBucketFillEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerChangeSkinEvent(PlayerChangeSkinEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerChunkRequestEvent(PlayerChunkRequestEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerCreationEvent(PlayerCreationEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerDropItemEvent(PlayerDropItemEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	////////////////////////
	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerEatFoodEvent(PlayerEatFoodEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerEditBookEvent(PlayerEditBookEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerFoodLevelChangeEvent(PlayerFoodLevelChangeEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerGameModeChangeEvent(PlayerGameModeChangeEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	//////////////222222
	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerMouseOverEntityEvent(PlayerMouseOverEntityEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPlayerServerSettingsRequestEvent(PlayerServerSettingsRequestEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPotionApplyEvent(PotionApplyEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void PlayerDataSerializeEvent(PlayerDataSerializeEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPluginEnableEvent(PluginEnableEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onPluginDisableEvent(PluginDisableEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onRemoteServerCommandEvent(RemoteServerCommandEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityEnterVehicleEvent(EntityEnterVehicleEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onEntityExitVehicleEvent(EntityExitVehicleEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onVehicleCreateEvent(VehicleCreateEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onVehicleDamageEvent(VehicleDamageEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onVehicleDestroyEvent(VehicleDestroyEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onVehicleMoveEvent(VehicleMoveEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onVehicleUpdateEvent(VehicleUpdateEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	@EventHandler(priority = EventPriority.MONITOR)
	public void onLightningStrikeEvent(LightningStrikeEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	public void onPlayerItemConsumeEvent(PlayerItemConsumeEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	public void onPlayerKickEvent(PlayerKickEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}

	public void onPlayerMapInfoRequestEvent(PlayerMapInfoRequestEvent event) {
		ScriptEngineFacade.invokeEvent(event);
	}
}